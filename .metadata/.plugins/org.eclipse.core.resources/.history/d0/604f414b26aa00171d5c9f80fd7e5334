package app;

import java.lang.reflect.Array;
import java.util.ArrayList;

public class Quicksort {
	private Bolsa numbers;
    private int number;

    public void sort(Bolsa values) {
    	
        // check for empty or null array
        if (values.getLength() == 0){
            return;
        }
        this.numbers = values;
        number = numbers.getLength();
        System.out.println("fuck");
        quicksort(0, number - 1);
    }

    private <T> void quicksort(int low, int high) {
         int i = low,  j = high;
        // Get the pivot element from the middle of the list
        T pivot = (T) numbers.get(low + (high-low)/2);
        //System.out.println(pivot);
        // Divide into two lists
        while (i <= j) {
            // If the current value from the left list is smaller than the pivot
            // element then get the next element from the left list
            while (numbers.get(i).compareTo(pivot) == -1) {
                i++;
            }
            // If the current value from the right list is larger than the pivot
            // element then get the next element from the right list
            while (numbers.get(j).compareTo(pivot) == 1) {
                j--;
               
            }

            // If we have found a value in the left list which is larger than
            // the pivot element and if we have found a value in the right list
            // which is smaller than the pivot element then we exchange the
            // values.
            // As we are done we can increase i and j
            if (i <= j) {
                exchange(i, j);
                i++;
                j--;
            }
        }
        // Recursion
        if (low < j)
            quicksort(low, j);
        if (i < high)
            quicksort(i, high);
    }
        private <T> void exchange(int i, int j) {
	        T temp = (T) numbers.get(i);
	        numbers.set(i, numbers.get(j));
	        numbers.set(j, (Comparable) temp);
	    }
    
}
