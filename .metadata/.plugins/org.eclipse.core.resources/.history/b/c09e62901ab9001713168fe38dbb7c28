package listas;

import node.node;

//los metodos faltantes que están en una foto en el grupo y el reindex

public class LinkedList<T> {
	private node<T> sentinel=null;

	public LinkedList(){
		sentinel = new node<T>();
		sentinel.setIndex(-1);
	}
	
	public LinkedList(T value) {
		this();
		node<T> tmp = new node<T>(value);
		tmp.setIndex(0);
		sentinel.setNext(tmp);
	}
	
	public void AddBefore(T value) {
		node<T> tmp = sentinel.getNext();
		node<T> nuevo = new node<T>(value);
		nuevo.setNext(tmp);
		sentinel.setNext(nuevo);
		
	}
	
	public void AddLast(T value){
		node<T> tmp = sentinel;
		
		while (tmp.getNext()!=null) {
			tmp = tmp.getNext();
		}
		tmp.setNext(new node<T>(value));
	}
	
	public void AddLastRec(T value){
		node<T> tmp = sentinel.getNext();
		AddLastRec(tmp,value);
	}
	
	private void AddLastRec(node<T> tmp,T value){
		if(tmp.getNext() == null){
			tmp.setNext(new node<T>(value));
			return;
		}
		else{
			AddLastRec(tmp.getNext(), value);
		}
		
	}
	public node<T> search (T value){
		return search (value, sentinel);
	}
	private node<T> search (T value, node<T> lista){
		if (lista.getNext() == null){
			return null;
		}
		if(lista.getNext().getValue().equals(value)){
			return lista.getNext();
		}
		return search(value, lista.getNext());
	}
	public boolean addbeforo(T value, T newvalue){
		node<T> tmp = sentinel;

		while(tmp.getNext()!= null && !tmp.getNext().getValue().equals(value)){
			tmp = tmp.getNext();
		}
		return (tmp.getNext()!=null)?addlasto(new node<T>(newvalue),tmp):false;
	}
	
	public boolean addlasto(T value, T newvalue){
		node<T> finder = search(value);
		if(finder != null){
			return addlasto(new node<T>(newvalue),finder);
		}
		else{
			return false;
		}
	}
	
	public boolean addlasto(T value, node<T> nodo){
		node<T> finder = search(value);
		if (finder != null){
			return addlasto(nodo, finder);
		}
		else{
			return false;
		}
	}
	
	private boolean addlasto (node<T> nodo, node<T> finder){
		nodo.setNext(finder.getNext());
		finder.setNext(nodo);
		
		return true;
	}
	
	public node<T> remmove (T value){
		node<T> tmp = sentinel;
		node<T> borrado = null;
		while(tmp.getNext() != null){
			if (tmp.getNext().getValue().equals(value)){
				borrado = tmp.getNext();
				tmp.setNext(tmp.getNext().getNext());
				return borrado;
			}
			else{
				tmp = tmp.getNext();
			}
		}
		return null;
	}
	
	public boolean remove (T value){
		node<T> tmp = sentinel;
		while(tmp.getNext() != null){
			if (tmp.getNext().getValue().equals(value)){
				tmp.setNext(tmp.getNext().getNext());
				return true;
			}
			else{
				tmp = tmp.getNext();
			}
		}
		return false;
	}
	
	public void printer() {
		printer(sentinel);
	}
	
	private void printer(node<T> tmp) {
		if (tmp.getNext()== null) {
			return;
		}
		else
			System.out.println(tmp.getNext().getValue());
		printer(tmp.getNext());
	}
	
	public void pronter() {
		node<T> tmp = sentinel;
		while (tmp.getNext()!=null) {
			tmp = tmp.getNext();
			System.out.println(tmp.getValue());
		}
	}
	
	public void ReIndex() {
		
	}
	
	

}
